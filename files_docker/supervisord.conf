# Supervisord now replaces worker.rb as the Docker CMD;
# Supervisor autostarts worker.rb;
# If worker.rb is still up after 1sec, it's considered to have started successfully by
# supervisor (default behavior);
# A 1sec sleep in worker.rb prior to attempting to process first job ensures supervisor
# can reliably ascertain startup success;
# If worker.rb exits for any reason, supervisor will attempt to restart it 3 times (default)
# with increasing BACKOFF delay of +1sec between retries (default);
# If restart procedure fails, worker.rb will enter FATAL state which causes supervisor event
# listener 'watchdog' to shutdown supervisord, bringing down the container;

[supervisord]
nodaemon=true
# root user must be explicitly declared to avoid logging errors
user=root
pidfile=/var/run/supervisor/supervisor.pid
# logging is configured from the program block
logfile=/dev/null
# disable log rotation to avoid logging errors
logfile_maxbytes=0

[rpcinterface:supervisor]
supervisor.rpcinterface_factory=supervisor.rpcinterface:make_main_rpcinterface

[unix_http_server]
file=/var/run/supervisor/supervisor.sock
# dummy credentials are used to avoid CRIT messages in the log regarding lack of auth
username = dummy
password = dummy

[supervisorctl]
serverurl=unix:///var/run/supervisor/supervisor.sock
username = dummy
password = dummy

# listen for FATAL state of any program and shut down supervisord, stopping container
[eventlistener:watchdog]
command=/bin/bash -c "echo READY; while read line; do exec /usr/local/bin/supervisorctl shutdown; done"
events=PROCESS_STATE_FATAL

[program:worker.rb]
command=/home/download_mover/app/src/worker.rb
redirect_stderr=false
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
# attempt to restart worker.rb regardless of exit code, unless stopped via supervisor
autorestart=true
# if worker.rb fails to stop when requested, kill it and its children to prevent orphans
killasgroup=true

